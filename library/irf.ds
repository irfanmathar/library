*Assesment using with Python Django*
           *project file in django*

Djangoproject->settings.Py
 
 from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0&$vg75p&8oq@06d0qn9!ohp)=wpda#c(5i%u=ma@p(n4@=&o&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'library',
    'frontend',
    'bootstrap5',
    
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangoproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'zoho1',
        'USER':'root',
        'PASSWORD':'Mathar!2003',
        'HOST':'localhost',
        'PORT':'3306'
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


STATICFILES_DIRS=[
    os.path.join(BASE_DIR,'static')
]
EMAIL_BACKEND='django.core.mail.backends.console.EmailBackend'
-------------------------------------------------------------------------------------------------------------
djangoproject->urls.Py
from django.contrib import admin
from django.urls import path,include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',include('library.urls')),
    
    
]
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
                         *app file in django*
library->models.Py

from django.db import models
from django.core.validators import MaxValueValidator, MinValueValidator
import datetime

class Books(models.Model):
    GENRE_CHOICES = [
        ('Fiction', 'Fiction'),
        ('Non-Fiction', 'Non-Fiction'),
        ('Sci-Fi', 'Sci-Fi'),
        ('Biography', 'Biography'),
    ]

    title = models.CharField(max_length=200)
    author = models.CharField(max_length=100)
    genre = models.CharField(max_length=20, choices=GENRE_CHOICES)
    publication_year = models.PositiveIntegerField(validators=[MinValueValidator(1900), MaxValueValidator(datetime.datetime.now().year)])
    available_copies = models.PositiveIntegerField(default=0)
    isbn_number = models.CharField(max_length=13, unique=True)
    rating = models.PositiveIntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)], null=True, blank=True)
    is_featured = models.BooleanField(default=False)
    def __str__(self):
        return self.title
    class Meta:
        ordering = ['-publication_year']
    

class Members(models.Model):
    MEMBERSHIP_CHOICES = [
        ('Basic', 'Basic'),
        ('Premium', 'Premium'),
        ('Elite', 'Elite'),
    ]

    name = models.CharField(max_length=100)
    email = models.EmailField()
    phone_number = models.CharField(max_length=10)
    membership_start_date = models.DateField(auto_now_add=True)
    membership_type = models.CharField(max_length=20, choices=MEMBERSHIP_CHOICES)
    max_books_allowed = models.PositiveIntegerField()
    def __str__(self):
        return self.name

class Transactions(models.Model):
    STATUS_CHOICES = [
        ('Issued', 'Issued'),
        ('Returned', 'Returned'),
        ('Overdue', 'Overdue'),
    ]

    member = models.ForeignKey(Members, on_delete=models.CASCADE)
    book = models.ForeignKey(Books, on_delete=models.CASCADE)
    issue_date = models.DateField(auto_now_add=True)
    return_date = models.DateField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES)
    fine_amount = models.DecimalField(max_digits=6, decimal_places=2, default=0)
    def mark_as_lost(self):
        self.status = 'Lost'
        self.book.available_copies = 0  # Set the book's available copies to 0
        self.note = f"Book marked as lost on {datetime.date.today()}"
        self.book.save()
        self.save()

    def __str__(self):
        return f"Transaction: {self.book.title} for {self.member.name}"

class Staffs(models.Model):
    ROLE_CHOICES = [
        ('Librarian', 'Librarian'),
        ('Assistant', 'Assistant'),
    ]

    name = models.CharField(max_length=100)
    email = models.EmailField()
    role = models.CharField(max_length=20, choices=ROLE_CHOICES)
    phone_number = models.CharField(max_length=10)
----------------------------------------------------------------------------------------------------------------------------------------
library -> forms.Py

from django import forms
from .models import *
from django.core.exceptions import ValidationError
from django.core.mail import send_mail
import datetime
import re


class BookForm(forms.ModelForm):
    class Meta:
        model = Books
        fields = '__all__'
        widgets={
            'title':forms.TextInput(attrs={'class':'form-control'}),
            'author':forms.TextInput(attrs={'class':'form-control'}),
            'genre':forms.Select(attrs={'class':'form-control'}),
            'publication_year':forms.DateTimeInput(attrs={'class':'form-control'}),
            'available_copies':forms.NumberInput(attrs={'class':'form-control'}),
            'isbn_number':forms.TextInput(attrs={'class':'form-control'}),
            'rating':forms.NumberInput(attrs={'class':'form-control'}),
            
        }
    def clean_publication_year(self):
        year = self.cleaned_data.get('publication_year')
        current_year = datetime.datetime.now().year
        if year < 1900 or year > current_year:
            raise ValidationError("Publication year must be between 1900 and the current year.")
        return year
    def validate_isbn(value):
        if not re.match(r'^\d{13}$', value):
             raise ValidationError("Invalid ISBN format. It should be 13 digits.")
    
    
class MemberForm(forms.ModelForm):
    class Meta:
        model = Members
        fields = '__all__'
        widgets={
            'name':forms.TextInput(attrs={'class':'form-control'}),
            'email':forms.EmailInput(attrs={'class':'form-control'}),
            'phone_number':forms.TextInput(attrs={'class':'form-control'}),
            'membership_start_date':forms.DateInput(attrs={'class':'form-control'}),
            'membership_type':forms.Select(attrs={'class':'form-control'}),
            'max_books_allowed':forms.NumberInput(attrs={'class':'form-control'})
        }
        
    def clean_email(self):
        email = self.cleaned_data.get('email')
        if Members.objects.filter(email=email).exists():
            raise ValidationError("A member with this email already exists.")
        return email
    def save(self, commit=True):
        member = super().save(commit)
        send_mail(
            'Welcome to the Library',
            'Hello {}, welcome to our library!'.format(member.name),
            'library@example.com',
            [member.email],
            fail_silently=False,
        )
        return member

    def clean(self):
        cleaned_data = super().clean()
        membership_type = cleaned_data.get('membership_type')
        if membership_type == 'Basic':
            cleaned_data['max_books_allowed'] = 2
        elif membership_type == 'Premium':
            cleaned_data['max_books_allowed'] = 5
        elif membership_type == 'Elite':
            cleaned_data['max_books_allowed'] = 10
        return cleaned_data

    
class TransactionForm(forms.ModelForm):
    class Meta:
        model = Transactions
        fields = '__all__'
        widgets={
            'member':forms.Select(attrs={'class':'form-control'}),
            'book':forms.Select(attrs={'class':'form-control'}),
            'status':forms.Select(attrs={'class':'form-control'}),
            'issue_date':forms.DateInput(attrs={'class':'form-control'}),
            'return_date':forms.DateInput(attrs={'class':'form-control'}),
            'fine_amount':forms.NumberInput(attrs={'class':'form-control'})
            
        }
    def clean(self):
        cleaned_data = super().clean()
        book = cleaned_data.get('book')
        return_date = cleaned_data.get('return_date')
        issue_date = cleaned_data.get('issue_date')
        
        if book and book.available_copies == 0:
            raise ValidationError("Cannot issue this book. No copies available.")
        
        if return_date and issue_date and return_date <= issue_date:
            raise ValidationError("Return date must be after the issue date.")
        
        if return_date and return_date > datetime.date.today():
            days_overdue = (return_date - issue_date).days - 14
            if days_overdue > 0:
                fine = days_overdue * 2
                cleaned_data['fine_amount'] = fine
                send_mail(
                    'Overdue Book Notice',
                    'Your book is overdue by {} days. Fine amount: ${}'.format(days_overdue, fine),
                    'library@example.com',
                    [cleaned_data['member'].email],
                    fail_silently=False,
                )
        return cleaned_data

    
class StaffForm(forms.ModelForm):
    class Meta:
        model = Staffs
        fields = '__all__'
        widgets={
            'name':forms.TextInput(attrs={'class':'form-control'}),
            'email':forms.EmailInput(attrs={'class':'form-control'}),
            'role':forms.Select(attrs={'class':'form-control'}),
            'phone_number':forms.TextInput(attrs={'class':'form-control'})
        }
--------------------------------------------------------------------------------------------------------------------------------
library ->view.py
from django.shortcuts import render,redirect,get_object_or_404
from .forms import *
from .models import *
from django.shortcuts import render
from .models import *
from django.db.models import Count
import datetime

def dashboard_view(request):
    # Ensure you import datetime and use datetime.date.today()
    overdue_transactions = Transactions.objects.filter(return_date__lt=datetime.date.today(), status='Issued')
    
    # Check if overdue_transactions has data
    print(overdue_transactions)  # For debugging purposes

    # Top Members
    top_members = Members.objects.annotate(total_books=Count('transactions')).order_by('-total_books')[:10]
    
    # Genre Data
    genre_data = Books.objects.values('genre').annotate(total=Count('id'))
    genre_labels = [item['genre'] for item in genre_data]
    genre_counts = [item['total'] for item in genre_data]

    # Staff Logs
    staff_logs = Staffs.objects.all().order_by('-id')
    print(staff_logs)  # For debugging purposes

    return render(request, 'dashboard.html', {
        'overdue_transactions': overdue_transactions,
        'top_members': top_members,
        'genre_labels': genre_labels,
        'genre_data': genre_counts,
        'staff_logs': staff_logs
    })
    

def add_book(request):
    context={
        'Book_Form':BookForm()
    }
    if request.method == 'POST':
        form = BookForm(request.POST)
        if form.is_valid():
            # Save the new book to the database
            form.save()
            return redirect('/listbook/')  # Redirect to book list after saving
        else:
            # If the form is invalid, re-render the form with error messages
            return render(request, 'book.html', {'form': form})
    else:
        form = BookForm()  # Create an empty form for GET request
        return render(request, 'book.html', {'form': form})
        
    return render(request,'book.html',context)

def add_member(request):
    if request.method == 'POST':
        forms = MemberForm(request.POST)
        if forms.is_valid():
            # Save the new member to the database
            forms.save()
            return redirect('/transaction/')  # Redirect to the member list after saving
        else:
            # If the form is invalid, re-render the form with error messages
            return render(request, 'member.html', {'forms': forms})
    else:
        forms= MemberForm()  # Create an empty form for GET request
        return render(request, 'member.html', {'forms': forms})
def add_transaction(request):
    
    if request.method == 'POST':
        transaction_form = TransactionForm(request.POST)
        if transaction_form.is_valid():
            # Save the new book to the database
            transaction_form.save()
            return redirect('/transaction_list/')  # Redirect to book list after saving
        else:
            # If the form is invalid, re-render the form with error messages
            return render(request, 'transaction.html', {'transaction_form': transaction_form})
    else:
        transaction_form = TransactionForm()  # Create an empty form for GET request
        return render(request, 'transaction.html', {'transaction_form': transaction_form})
    
def add_staff(request):
    if request.method == 'POST':
        staff_form = StaffForm(request.POST)
        if staff_form.is_valid():
            # Save the new book to the database
            staff_form.save()
            return redirect('/dashboard/')  # Redirect to book list after saving
        else:
            # If the form is invalid, re-render the form with error messages
            return render(request, 'staff.html', {'staff_form':staff_form})
    else:
        staff_form= StaffForm()  
        return render(request, 'staff.html', {'staff_form': staff_form})
def toggle_featured(request, book_id):
    book = get_object_or_404(Books, id=book_id)
    book.is_featured = not book.is_featured  
    book.save()
    return redirect('/book/') 
def mark_as_lost(request, transaction_id):
    transaction = get_object_or_404(Transactions, id=transaction_id)
    transaction.mark_as_lost()  
    return redirect('/transaction/')
def book_list(request):
    # Get all books from the database
    books = Books.objects.all()
    
    # Render the books list template and pass the books context
    return render(request, 'allbook.html', {
        'books': books
    })
def transaction_list(request):
    # Get all transactions (you can add filters like 'Issued' status if needed)
    transactions = Transactions.objects.all()
    
    # Pass transactions to the template
    return render(request, 'list.html', {'transactions': transactions})
-------------------------------------------------------------------------------------------------------------------
library -> urls.py

from django.urls import path
from .views import *

urlpatterns = [
    path('',add_book),
    path('member/',add_member),
    path('transaction/',add_transaction),
    path('staff/',add_staff),
    path('dashboard/',dashboard_view),
    path('book/feature/<int:book_id>/', toggle_featured, name='toggle_featured'),
    path('transaction/lost/<int:transaction_id>/', mark_as_lost, name='mark_as_lost'),
    path('listbook/', book_list, name='book_list'),
    path('transaction_list/', transaction_list, name='transaction_list'),
]
---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------

                 *html file in frontendapp*
Base.HTML #only basic code in this file

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        <style>
            .container {
                background-color: #f9f9f9;
                padding: 20px;
                border-radius: 10px;
                margin-down:30px;
            }
            .card {
                background-color: #ffffff;
                border-radius: 10px;
            }
            .form-control {
                border-radius: 5px;
            }
            .btn-primary {
                background-color: #007bff;
                border-color: #007bff;
                margin-left:150px;
                margin-right:150px;
            }
            .btn-primary:hover {
                background-color: #0056b3;
                border-color: #0056b3;
                
            }
        </style>
        
    </style>
    {% load bootstrap5 %}
    {% bootstrap_css %}
    {% bootstrap_javascript %}
</head>
<body>
    {% include 'nav.html' %}
    {% block content %}
    {% endblock %}
</body>
</html>
--------------------------------------------------------------------------------------------------------------------------
Nav.html #Navbar code
{% load static %}
<nav class="navbar navbar-expand-lg bg-dark navbar-dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="#"><img src="{% static 'css/lib.webp '%}" width="30px"></a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item">
                <a class="nav-link active" aria-current="page" href="/">Book</a>
              </li>
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/member/">Member</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" href="/transaction/">Transcation</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" href="/staff/">Staff</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" href="/dashboard/">DashBoard</a>
          </li>
         
          
        </ul>
        <form class="d-flex" role="search">
          <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
          <button class="btn btn-outline-success" type="submit">Search</button>
        </form>
      </div>
    </div>
  </nav>
  ---------------------------------------------------------------------------------------------------------
Book.html #Add a book page
{% extends 'base.html' %}
{% load static %}
{% block content %}
<style>
    .body{
        background: linear-gradient(135deg, #74b9ff, #a29bfe);
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .col-sm-4{
        margin-top:100px;
    }
</style>

<div class="body">
    <br>
<div class="container">
    <div class="row">
        <div class="col-sm-4">
            <br><br><br>
            <center><img src="{% static 'css/lib1.jpg '%}"  width="300px"></center><br>
            <h3>Do You Have View All Book Click Here</h3>
            <br>
            <a href="/listbook/" class="btn btn-success">All Book</a>
        </div>
        <div class="col-sm-1">
        </div>
        <div class="col-sm-6">
            <h2 class="text-center mb-4"> Add Books </h2>
    <form method="POST" action="">
        {% csrf_token %}
        <div class="card p-4 shadow-sm">
        {{ form.as_p }}

        <button type="submit" class="btn btn-primary ">Add Book</button>
        
    </form>

        </div>
    </div>
</div>
</div>
{% endblock %}
---------------------------------------------------------------------------------------------------
Allbook.html #view all book
{% extends 'base.html' %}
{% block content %}
<style>
    body {
        background: linear-gradient(135deg, #E3F2FD, #FCE4EC); /* Light Blue to Pink Gradient */
        margin: 0;
        font-family: 'Arial', sans-serif;
    }
    /* General Styling for Container */
    .container {
        margin-top: 40px;
    }

    /* Title Styling */
    h3 {
        font-family: 'Arial', sans-serif;
        font-weight: bold;
        color: #2E7D32; /* Dark Green */
        margin-bottom: 10px;
    }

    /* Book Information Styling */
    p {
        font-size: 16px;
        color: #424242; /* Dark Gray */
        margin-bottom: 15px;
    }

    /* Featured Book Styling */
    .featured {
        color: green;
        font-weight: bold;
    }

    /* Styling the Book Div Containers */
    .book-container {
        background-color: #F1F8E9; /* Light Green */
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        transition: transform 0.3s ease-in-out;
    }

    /* Hover effect on Book Containers */
    .book-container:hover {
        transform: scale(1.02);
    }

    /* Button Styling */
    .feature-btn {
        background-color: #FF9800; /* Orange */
        color: white;
        padding: 8px 12px;
        text-decoration: none;
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

    .feature-btn:hover {
        background-color: #FF5722; /* Darker Orange */
    }

    /* Responsive Design for Mobile Devices */
    @media (max-width: 768px) {
        .col-sm-3, .col-sm-6 {
            margin-bottom: 20px;
        }
    }
</style>

<div class="container">
    <div class="row">
        <!-- Book List Section -->
        <div class="col-sm-3"></div>
        <div class="col-sm-6">
            {% for book in books %}
                <div class="book-container">
                    <h3>{{ book.title }} by {{ book.author }}</h3>
                    <p>Genre: {{ book.genre }} | Available Copies: {{ book.available_copies }} | Rating: {{ book.rating }}</p>
                    <p>
                        {% if book.is_featured %}
                            <span class="featured">Featured</span>
                        {% else %}
                            <a href="{% url 'toggle_featured' book.id %}" class="feature-btn">Mark as Featured</a>
                        {% endif %}
                    </p>
                </div>
            {% endfor %}
        </div>
    </div>
</div>

{% endblock %}
------------------------------------------------------------------------------------------------------------------------------
member.html #add member
{% extends 'base.html' %}
{% block content %}
<style>
    .body{
        background: linear-gradient(135deg, #74b9ff, #a29bfe);
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>
<div class="body">
<br>
<div class="container">
    <div class="row">
        <div class="col-sm-3">
        </div>
        <div class="col-sm-6">
            <h2 class="text-center mb-4">Add Member</h2>
            <form method="POST" action="">
                {% csrf_token %}
                <div class="card p-4 shadow-sm">
                {{ forms.as_p }}
                <button type="submit" class="btn btn-primary">Add Member</button>
            </form>
        
        </div>
    </div>
</div>
</div>
{% endblock %}
--------------------------------------------------------------------------------------------------
transaction.html #Add transaction
{% extends 'base.html' %}
{% load static %}
{% block content %}
<style>
    .body{
        background: linear-gradient(135deg, #74b9ff, #a29bfe);
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .col-sm-4{
        margin-top:70px;
    }
</style>
<div class="body">
<br>
<div class="container">
    <div class="row">
        <div class="col-sm-4">
            <br><br><br>
            <center><img src="{% static 'css/lib1.jpg '%}"  width="300px"></center><br>
            <h3>Do You Have View All Trans Click Here</h3>
            <br>
            <a href="/transaction_list/" class="btn btn-success">List Of Transaction</a>
        </div>
        <div class="col-sm-1">
        </div>
        <div class="col-sm-6">
            <h2 class="text-center mb-4">Transactions Module</h2>
    <form method="POST" action="">
        {% csrf_token %}
        <div class="card p-4 shadow-sm">
        {{ transaction_form.as_p }}
        
        
        

        <button type="submit" class="btn btn-primary ">Record Transaction</button>
    </form>
        </div>
    </div>
</div>
</div>
{% endblock %}
--------------------------------------------------------------------------------------------------------
list.html  # view all transaction
{% extends 'base.html' %}
{% load static %}
{% block content %}
<style>
    .body{
        background: linear-gradient(135deg, #74b9ff, #a29bfe);
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .col-sm-4{
        margin-top:70px;
    }
</style>
<div class="body">
<br>
<div class="container">
    <div class="row">
        <div class="col-sm-4">
            <br><br><br>
            <center><img src="{% static 'css/lib1.jpg '%}"  width="300px"></center><br>
            <h3>Do You Have View All Trans Click Here</h3>
            <br>
            <a href="/transaction_list/" class="btn btn-success">List Of Transaction</a>
        </div>
        <div class="col-sm-1">
        </div>
        <div class="col-sm-6">
            <h2 class="text-center mb-4">Transactions Module</h2>
    <form method="POST" action="">
        {% csrf_token %}
        <div class="card p-4 shadow-sm">
        {{ transaction_form.as_p }}
        
        
        

        <button type="submit" class="btn btn-primary ">Record Transaction</button>
    </form>
        </div>
    </div>
</div>
</div>
{% endblock %}
-------------------------------------------------------------------------------------------
staff.html   #Add staff page
{% extends 'base.html' %}
{% load static %}
{% block content %}
<style>
    .body{
        background: linear-gradient(135deg, #74b9ff, #a29bfe);
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .col-sm-4{
        margin-top:70px;
    }
</style>
<div class="body">
<br>
<div class="container">
    <div class="row">
        <div class="col-sm-4">
            <br><br><br>
            <center><img src="{% static 'css/lib1.jpg '%}"  width="300px"></center><br>
            <h3>Do You Have View All Trans Click Here</h3>
            <br>
            <a href="/transaction_list/" class="btn btn-success">List Of Transaction</a>
        </div>
        <div class="col-sm-1">
        </div>
        <div class="col-sm-6">
            <h2 class="text-center mb-4">Transactions Module</h2>
    <form method="POST" action="">
        {% csrf_token %}
        <div class="card p-4 shadow-sm">
        {{ transaction_form.as_p }}
        
        
        

        <button type="submit" class="btn btn-primary ">Record Transaction</button>
    </form>
        </div>
    </div>
</div>
</div>
{% endblock %}
---------------------------------------------------------------------------------------------
Dashboard.html
{% extends 'base.html' %}
{% block content %}
<style>
    body {
        background: linear-gradient(135deg, #E3F2FD, #FCE4EC); /* Light Blue to Pink Gradient */
        margin: 0;
        font-family: 'Arial', sans-serif;
    }
    
.container-fluid {
    margin-top: 10px;
}

/* Header Style */
h2 {
    color: #4CAF50;
    font-family: 'Arial', sans-serif;
    text-align: center;
    margin-bottom: 15px;
}

/* Overdue Transactions Section */
.overdue-section {
    background-color: #FFEBEE;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.overdue-section ul {
    list-style-type: none;
    padding: 0;
}

.overdue-section li {
    margin: 10px 0;
    color: #E57373;
}

.overdue-section p {
    font-style: italic;
    color: #BDBDBD;
}

/* Table Styles */
.table-striped th {
    background-color: #4CAF50;
    color: white;
}

.table-striped td {
    color: #4CAF50;
}

/* Staff Logs Section */
.staff-logs-section {
    background-color: #E8F5E9;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.staff-logs-section ul {
    list-style-type: none;
    padding: 0;
}

.staff-logs-section li {
    margin: 10px 0;
    color: #66BB6A;
}

/* Genre Popularity Chart Section */
.genre-chart-section {
    background-color: #FFF9C4;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Responsive Column Layout */
@media (max-width: 768px) {
    .col-sm-3, .col-sm-4 {
        margin-bottom: 30px;
    }
}
</style>
<div class="body">
<div class="container-fluid">
    <div class="row">
      <div class="col-sm-2 overdue-section">
        <h2>Overdue Transactions</h2>
{% if overdue_transactions %}
    <ul>
        {% for transaction in overdue_transactions %}
            <li>{{ transaction.book.title }} - {{ transaction.member.name }}</li>
        {% endfor %}
    </ul>
{% else %}
    <p>No overdue transactions.</p>
{% endif %}


    </div>
    <div class="col-sm-1">
    </div>
    <div class="col-sm-3">
    <h2>Top Members Report</h2>
    <table class="table table_striped">
        <tr>
            <th>Member</th>
            <th>Total_Books</th>
        </tr>
        {% for member in top_members %}
        <tr>
            <td>{{ member.name }}</td>
            <td>{{ member.total_books }}</td>
        </tr>
        {% endfor %}
    </table>
    </div>
    <div class="col-sm-1">
    </div>
    <div class="col-sm-2 genre-chart-section">
    <h2>Genre Popularity</h2>
    <canvas id="genreChart"></canvas>
    <script>
        var ctx = document.getElementById('genreChart').getContext('2d');
        var genreChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: {{ genre_labels|safe }},
                datasets: [{
                    label: 'Books by Genre',
                    data: {{ genre_data|safe }},
                    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4CAF50']
                }]
            }
        });
    </script>
    </div>
    <br>
    <div class="col-sm-1">
    </div>
    
    <div class="col-sm-2 staff-logs-section">
        
        
        <h2>Staff Logs</h2>
        {% if staff_logs %}
            <ul>
                {% for staff in staff_logs %}
                    <li>{{ staff.name }} - {{ staff.role }}</li>
                {% endfor %}
            </ul>
        {% else %}
            <p>No staff logs available.</p>
        {% endif %}
    </div>
</div>
{% endblock %}
